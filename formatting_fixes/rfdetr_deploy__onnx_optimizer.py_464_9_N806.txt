â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚ Edit rfdetr/deploy/_onnx/optimizer.py[0m                                        â”‚
â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚          C = weights_k.shape[0][0m                                              â”‚
â”‚          # Number of heads[0m                                                   â”‚
â”‚          H = heads[0m                                                           â”‚
â”‚          # Hidden dimension per head[0m                                         â”‚
â”‚ -        D = weights_k.shape[1] // H[0m                                         â”‚
â”‚ +        d = weights_k.shape[1] // H[0m                                         â”‚
â”‚  [0m                                                                            â”‚
â”‚          # Concat and interleave weights such that the output of fused QK...[0m â”‚
â”‚          weights_qkv = np.dstack([0m                                            â”‚
â”‚              [weights_q.reshape(C, H, D), weights_k.reshape(C, H, D), wei...[0m â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯

â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚ Edit rfdetr/deploy/_onnx/optimizer.py[0m                                        â”‚
â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚          d = weights_k.shape[1] // H[0m                                         â”‚
â”‚  [0m                                                                            â”‚
â”‚          # Concat and interleave weights such that the output of fused QK...[0m â”‚
â”‚          weights_qkv = np.dstack([0m                                            â”‚
â”‚ -            [weights_q.reshape(C, H, D), weights_k.reshape(C, H, D), wei...[0m â”‚
â”‚ -        ).reshape(C, 3 * H * D)[0m                                             â”‚
â”‚ +            [weights_q.reshape(C, H, d), weights_k.reshape(C, H, d), wei...[0m â”‚
â”‚ +        ).reshape(C, 3 * H * d)[0m                                             â”‚
â”‚  [0m                                                                            â”‚
â”‚          input_tensor = node_k.inputs[0]  # K and V have the same input[0m      â”‚
â”‚          # Q, K and V must have the same output which we feed into fmha p...[0m â”‚
â”‚          output_tensor_k = node_k.outputs[0][0m                                 â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯

