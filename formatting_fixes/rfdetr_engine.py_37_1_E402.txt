â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚ Edit rfdetr/engine.py[0m                                                        â”‚
â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚  from collections.abc import Iterable[0m                                        â”‚
â”‚  from typing import Callable, Optional[0m                                       â”‚
â”‚  [0m                                                                            â”‚
â”‚  import torch[0m                                                                â”‚
â”‚ +from torch.amp import GradScaler, autocast[0m                                  â”‚
â”‚  [0m                                                                            â”‚
â”‚  import rfdetr.util.misc as utils[0m                                            â”‚
â”‚  from rfdetr.datasets.coco_eval import CocoEvaluator[0m                         â”‚
â”‚  from rfdetr.util.error_handling import TrainingError[0m                        â”‚
â”‚  from rfdetr.util.misc import NestedTensor[0m                                   â”‚
â”‚  [0m                                                                            â”‚
â”‚  logger = get_logger(__name__)[0m                                               â”‚
â”‚  [0m                                                                            â”‚
â”‚ -# Import AMP utilities[0m                                                      â”‚
â”‚ -from torch.amp import GradScaler, autocast[0m                                  â”‚
â”‚  [0m                                                                            â”‚
â”‚ -[0m                                                                            â”‚
â”‚  def do_evaluation_during_training([0m                                          â”‚
â”‚      model, criterion, postprocessors, val_data_loader, base_ds, device, ...[0m â”‚
â”‚  ):[0m                                                                          â”‚
â”‚      """Helper function to evaluate model during training."""[0m                â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯

â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚ Edit rfdetr/engine.py[0m                                                        â”‚
â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚      """Helper function to evaluate model during training."""[0m                â”‚
â”‚      logger.info(f"Running evaluation at step {step_counter}")[0m               â”‚
â”‚      model.eval()[0m                                                            â”‚
â”‚      with torch.no_grad():[0m                                                   â”‚
â”‚ -        # If in test_mode, set val_limit_test_mode for quicker validation[0m   â”‚
â”‚ -        original_test_mode = getattr(args, "test_mode", False)[0m              â”‚
â”‚ -        original_val_limit = getattr(args, "val_limit", None)[0m               â”‚
â”‚ +        # Save original validation configuration if needed in the future[0m    â”‚
â”‚ +        # original_test_mode = getattr(args, "test_mode", False)[0m            â”‚
â”‚ +        # original_val_limit = getattr(args, "val_limit", None)[0m             â”‚
â”‚          [0m                                                                    â”‚
â”‚          if hasattr(args, "test_mode") and args.test_mode:[0m                   â”‚
â”‚              logger.info(f"Using test mode with validation limit of {args...[0m â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯

